/*
 * This file is part of the Buildings and Habitats object Model (BHoM)
 * Copyright (c) 2015 - 2021, the respective contributors. All rights reserved.
 *
 * Each contributor holds copyright over their respective contributions.
 * The project versioning (Git) records all such contribution source information.
 *                                           
 *                                                                              
 * The BHoM is free software: you can redistribute it and/or modify         
 * it under the terms of the GNU Lesser General Public License as published by  
 * the Free Software Foundation, either version 3.0 of the License, or          
 * (at your option) any later version.                                          
 *                                                                              
 * The BHoM is distributed in the hope that it will be useful,              
 * but WITHOUT ANY WARRANTY; without even the implied warranty of               
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                 
 * GNU Lesser General Public License for more details.                          
 *                                                                            
 * You should have received a copy of the GNU Lesser General Public License     
 * along with this code. If not, see <https://www.gnu.org/licenses/lgpl-3.0.html>.      
 */

using BH.oM.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;

namespace BH.Engine.Reflection
{
    internal static class Global
    {
        /***************************************************/
        /****     Internal properties - collections     ****/
        /***************************************************/

        //TODO: add lock on every attempt to access a property?
        //TODO: then could move out the extraction methods to Compute - does it make sense to make them public though?
        internal static List<string> LoadedAssemblies = AppDomain.CurrentDomain.GetAssemblies().Select(x => x.GetName().Name).ToList();
        internal static List<Assembly> BHoMAssemblies = null;
        internal static List<Assembly> AllAssemblies = null;
        internal static List<Type> BHoMTypeList = null;
        internal static List<Type> AdapterTypeList = null;
        internal static List<Type> AllTypeList = null;
        internal static List<Type> InterfaceList = null;
        internal static List<Type> EngineTypeList = null;
        internal static Dictionary<string, List<Type>> BHoMTypeDictionary = null;
        internal static List<MethodInfo> BHoMMethodList = null;
        internal static List<MethodBase> AllMethodList = null;
        internal static List<MethodBase> ExternalMethodList = null;


        /***************************************************/
        /****             Internal methods              ****/
        /***************************************************/

        internal static void ExtractAssembliesTypesAndMethods()
        {
            ExtractAllAssemblies();
            ExtractAllTypes();
            ExtractAllMethods();
        }

        /***************************************************/

        internal static void ExtractAllAssemblies()
        {
            AllAssemblies = AppDomain.CurrentDomain.GetAssemblies().GroupBy(x => x.FullName).Select(g => g.First()).ToList();
            BHoMAssemblies = AllAssemblies.Where(x => x.IsBHoM()).ToList();
        }

        /***************************************************/

        internal static void ExtractAllTypes()
        {
            BHoMTypeList = new List<Type>();
            AdapterTypeList = new List<Type>();
            AllTypeList = new List<Type>();
            InterfaceList = new List<Type>();
            EngineTypeList = new List<Type>();
            BHoMTypeDictionary = new Dictionary<string, List<Type>>();

            foreach (Assembly asm in BHoMAssemblies)
            {
                try
                {
                    // Save BHoM objects only
                    if (asm.IsOmAssembly())
                    {
                        foreach (Type type in asm.GetTypes())
                        {
                            if (type.Namespace != null && regexOmNamespace.IsMatch(type.Namespace))
                            {
                                AddBHoMTypeToDictionary(type.FullName, type);
                                if (type.IsInterface)
                                    InterfaceList.Add(type);
                                else if (!(type.IsAbstract && type.IsSealed) && (type.IsEnum || typeof(IObject).IsAssignableFrom(type)))
                                    BHoMTypeList.Add(type);
                            }
                            if (type.Namespace != null && !type.IsAutoGenerated())
                                AllTypeList.Add(type);
                        }
                    }
                    // Save adapters
                    else if (asm.IsAdapterAssembly())
                    {
                        foreach (Type type in asm.GetTypes())
                        {
                            if (!type.IsAutoGenerated())
                            {
                                if (!type.IsInterface && type.IsLegal() && type.IsOfType("BHoMAdapter"))
                                    AdapterTypeList.Add(type);

                                if (type.Namespace != null)
                                    AllTypeList.Add(type);
                            }

                        }
                    }
                    // Save engine
                    else if (asm.IsEngineAssembly())
                    {
                        foreach (Type type in asm.GetTypes())
                        {
                            if (!type.IsAutoGenerated())
                            {
                                if (type.Namespace != null && regexEngineNamespace.IsMatch(type.Namespace))
                                    EngineTypeList.Add(type);

                                if (type.Namespace != null)
                                    AllTypeList.Add(type);
                            }
                        }
                    }
                    else
                    {
                        foreach (Type type in asm.GetTypes())
                        {
                            if (type.Namespace != null && type.Namespace.StartsWith("BH.") && !type.IsAutoGenerated())
                                AllTypeList.Add(type);
                        }
                    }
                }
                catch (Exception)
                {
                    Compute.RecordWarning("Cannot load types from assembly " + asm.GetName().Name);
                }
            }
        }

        /***************************************************/

        internal static void ExtractAllMethods()
        {
            BHoMMethodList = new List<MethodInfo>();
            AllMethodList = new List<MethodBase>();
            ExternalMethodList = new List<MethodBase>();

            BindingFlags bindingBHoM = BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static;
            foreach (Assembly asm in BHoMAssemblies)
            {
                try
                {
                    // Save BHoM objects only
                    if (asm.IsEngineAssembly())
                    {
                        foreach (Type type in asm.GetTypes())
                        {
                            // Get only the BHoM methods
                            if (!type.IsInterface && type.IsAbstract)
                            {
                                MethodInfo[] typeMethods = type.GetMethods(bindingBHoM);
                                BHoMMethodList.AddRange(typeMethods.Where(x => x.IsLegal()));
                            }

                            if (type.Name == "External")
                            {
                                MethodInfo getExternalMethods = type.GetMethod("Methods");
                                if (getExternalMethods != null)
                                    ExternalMethodList.AddRange((List<MethodInfo>)getExternalMethods.Invoke(null, null));
                                MethodInfo getExternalCtor = type.GetMethod("Constructors");
                                if (getExternalCtor != null)
                                    ExternalMethodList.AddRange((List<ConstructorInfo>)getExternalCtor.Invoke(null, null));
                            }
                            // Get everything
                            StoreAllMethods(type);
                        }
                    }
                    else if (asm.IsOmAssembly() || asm.IsAdapterAssembly() || asm.IsUiAssembly())
                    {
                        foreach (Type type in asm.GetTypes())
                        {
                            StoreAllMethods(type);
                        }
                    }
                }
                catch (Exception e)
                {

                    string message = "Cannot load types from assembly " + asm.GetName().Name + ". Exception message: " + e.Message;

                    if (!string.IsNullOrEmpty(e.InnerException?.Message))
                    {
                        message += "\nInnerException: " + e.InnerException.Message;
                    }

                    Compute.RecordWarning(message);
                }
            }
        }


        /***************************************************/
        /**** Private Methods                           ****/
        /***************************************************/

        private static bool IsBHoM(this Assembly assembly)
        {
            string name = assembly.GetName().Name;
            return name.IsOmAssembly() || name.IsEngineAssembly() || name.IsAdapterAssembly() || name.IsUiAssembly();
        }

        /***************************************************/

        private static bool IsOfType(this Type type, string match)
        {
            Type baseType = type.BaseType;
            if (baseType == null || baseType.Name == "Object")
                return false;
            else if (baseType.Name == match)
                return true;
            else
                return baseType.IsOfType(match);
        }

        /***************************************************/

        private static void StoreAllMethods(Type type)
        {
            BindingFlags bindingAll = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Instance;

            if (type.Namespace != null && type.Namespace.StartsWith("BH.") && !type.IsAutoGenerated())
            {
                AllMethodList.AddRange(type.GetConstructors(bindingAll).Where(x => x.GetMethodBody() != null && !x.IsAutoGenerated()));

                MethodInfo[] methods = type.GetMethods(bindingAll);
                foreach (var method in methods)
                {
                    try
                    {
                        if (method.GetMethodBody() != null && !method.IsAutoGenerated())
                            AllMethodList.Add(method);
                    }
                    catch (Exception e)
                    {
                        string message = "Cannot load method " + method.Name + " from type  " + type.Name + ". Exception message: " + e.Message;

                        if (!string.IsNullOrEmpty(e.InnerException?.Message))
                        {
                            message += "\nInnerException: " + e.InnerException.Message;
                        }

                        Compute.RecordWarning(message);
                    }
                }
            }
        }

        /***************************************************/

        private static void AddBHoMTypeToDictionary(string name, Type type)
        {
            if (Global.BHoMTypeDictionary.ContainsKey(name))
                Global.BHoMTypeDictionary[name].Add(type);
            else
            {
                List<Type> list = new List<Type>();
                list.Add(type);
                Global.BHoMTypeDictionary[name] = list;
            }

            int firstDot = name.IndexOf('.');
            if (firstDot >= 0)
                AddBHoMTypeToDictionary(name.Substring(firstDot + 1), type);
        }


        /***************************************************/
        /****          Private fields - locks           ****/
        /***************************************************/

        private static readonly object LoadAssembliesLock = new object();
        private static readonly object GetAssembliesLock = new object();
        private static readonly object GetMethodsLock = new object();
        private static readonly object m_GetTypesLock = new object();


        /***************************************************/
        /****          Private fields - regex           ****/
        /***************************************************/

        private static Regex regexOmNamespace = new Regex(@"BH.*.oM.");
        private static Regex regexEngineNamespace = new Regex(@"BH.*.Engine.");

        /***************************************************/
    }
}
