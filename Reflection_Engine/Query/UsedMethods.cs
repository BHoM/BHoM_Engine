using System;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using Mono.Cecil;
using Mono.Reflection;

namespace BH.Engine.Reflection
{
    public static partial class Query
    {
        /***************************************************/
        /**** Public Methods                            ****/
        /***************************************************/

        public static List<MethodBase> UsedMethods(this MethodBase method, bool onlyBHoM = false)
        {
            try
            {
                if (method.GetMethodBody() == null)
                    return new List<MethodBase>();
                IEnumerable<MethodBase> methods = Disassembler.GetInstructions(method)
                                .Select(x => x.Operand)
                                .OfType<MethodBase>()
                                .Distinct()
                                .Where(x => x.DeclaringType.Namespace != null)
                                .SelectMany(x => x.IsAutoGenerated() ? x.UsedMethods(onlyBHoM) : new List<MethodBase> { x });

                if (onlyBHoM)
                    return methods.Where(x => x.DeclaringType.Namespace.StartsWith("BH.")).ToList();
                else
                    return methods.ToList();
            }
            catch (Exception e)
            {
                Compute.RecordError("Method " + method.DeclaringType.Namespace + "." + method.Name + " failed to extract the information about the method.\nError: " + e.ToString());
                return new List<MethodBase>();
            }
        }

        /***************************************************/
    }
}
