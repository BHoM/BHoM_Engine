using BH.oM.Geometry;

namespace BH.Engine.Geometry
{
    public static partial class Transform
    {
        /***************************************************/
        /**** Public Methods                            ****/
        /***************************************************/

        public static TransformMatrix GetInverted(this TransformMatrix transform)
        {
            double[,] m = transform.Matrix;
            double[,] mNew = new double[4, 4] {
                {
                    m[1,2] * m[2,3] * m[3,1] - m[1,3] * m[2,2] * m[3,1] + m[1,3] * m[2,1] * m[3,2] - m[1,1] * m[2,3] * m[3,2] - m[1,2] * m[2,1] * m[3,3] + m[1,1] * m[2,2] * m[3,3],
                    m[0,3] * m[2,2] * m[3,1] - m[0,2] * m[2,3] * m[3,1] - m[0,3] * m[2,1] * m[3,2] + m[0,1] * m[2,3] * m[3,2] + m[0,2] * m[2,1] * m[3,3] - m[0,1] * m[2,2] * m[3,3],
                    m[0,2] * m[1,3] * m[3,1] - m[0,3] * m[1,2] * m[3,1] + m[0,3] * m[1,1] * m[3,2] - m[0,1] * m[1,3] * m[3,2] - m[0,2] * m[1,1] * m[3,3] + m[0,1] * m[1,2] * m[3,3],
                    m[0,3] * m[1,2] * m[2,1] - m[0,2] * m[1,3] * m[2,1] - m[0,3] * m[1,1] * m[2,2] + m[0,1] * m[1,3] * m[2,2] + m[0,2] * m[1,1] * m[2,3] - m[0,1] * m[1,2] * m[2,3]
                },
                {
                    m[1,3] * m[2,2] * m[3,0] - m[1,2] * m[2,3] * m[3,0] - m[1,3] * m[2,0] * m[3,2] + m[1,0] * m[2,3] * m[3,2] + m[1,2] * m[2,0] * m[3,3] - m[1,0] * m[2,2] * m[3,3],
                    m[0,2] * m[2,3] * m[3,0] - m[0,3] * m[2,2] * m[3,0] + m[0,3] * m[2,0] * m[3,2] - m[0,0] * m[2,3] * m[3,2] - m[0,2] * m[2,0] * m[3,3] + m[0,0] * m[2,2] * m[3,3],
                    m[0,3] * m[1,2] * m[3,0] - m[0,2] * m[1,3] * m[3,0] - m[0,3] * m[1,0] * m[3,2] + m[0,0] * m[1,3] * m[3,2] + m[0,2] * m[1,0] * m[3,3] - m[0,0] * m[1,2] * m[3,3],
                    m[0,2] * m[1,3] * m[2,0] - m[0,3] * m[1,2] * m[2,0] + m[0,3] * m[1,0] * m[2,2] - m[0,0] * m[1,3] * m[2,2] - m[0,2] * m[1,0] * m[2,3] + m[0,0] * m[1,2] * m[2,3]
                },
                {
                    m[1,1] * m[2,3] * m[3,0] - m[1,3] * m[2,1] * m[3,0] + m[1,3] * m[2,0] * m[3,1] - m[1,0] * m[2,3] * m[3,1] - m[1,1] * m[2,0] * m[3,3] + m[1,0] * m[2,1] * m[3,3],
                    m[0,3] * m[2,1] * m[3,0] - m[0,1] * m[2,3] * m[3,0] - m[0,3] * m[2,0] * m[3,1] + m[0,0] * m[2,3] * m[3,1] + m[0,1] * m[2,0] * m[3,3] - m[0,0] * m[2,1] * m[3,3],
                    m[0,1] * m[1,3] * m[3,0] - m[0,3] * m[1,1] * m[3,0] + m[0,3] * m[1,0] * m[3,1] - m[0,0] * m[1,3] * m[3,1] - m[0,1] * m[1,0] * m[3,3] + m[0,0] * m[1,1] * m[3,3],
                    m[0,3] * m[1,1] * m[2,0] - m[0,1] * m[1,3] * m[2,0] - m[0,3] * m[1,0] * m[2,1] + m[0,0] * m[1,3] * m[2,1] + m[0,1] * m[1,0] * m[2,3] - m[0,0] * m[1,1] * m[2,3]
                },
                {
                    m[1,2] * m[2,1] * m[3,0] - m[1,1] * m[2,2] * m[3,0] - m[1,2] * m[2,0] * m[3,1] + m[1,0] * m[2,2] * m[3,1] + m[1,1] * m[2,0] * m[3,2] - m[1,0] * m[2,1] * m[3,2],
                    m[0,1] * m[2,2] * m[3,0] - m[0,2] * m[2,1] * m[3,0] + m[0,2] * m[2,0] * m[3,1] - m[0,0] * m[2,2] * m[3,1] - m[0,1] * m[2,0] * m[3,2] + m[0,0] * m[2,1] * m[3,2],
                    m[0,2] * m[1,1] * m[3,0] - m[0,1] * m[1,2] * m[3,0] - m[0,2] * m[1,0] * m[3,1] + m[0,0] * m[1,2] * m[3,1] + m[0,1] * m[1,0] * m[3,2] - m[0,0] * m[1,1] * m[3,2],
                    m[0,1] * m[1,2] * m[2,0] - m[0,2] * m[1,1] * m[2,0] + m[0,2] * m[1,0] * m[2,1] - m[0,0] * m[1,2] * m[2,1] - m[0,1] * m[1,0] * m[2,2] + m[0,0] * m[1,1] * m[2,2]
                }
            };
            return new TransformMatrix(mNew) / transform.GetDeterminant();
        }
    }
}
