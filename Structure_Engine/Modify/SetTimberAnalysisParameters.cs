/*
 * This file is part of the Buildings and Habitats object Model (BHoM)
 * Copyright (c) 2015 - 2023, the respective contributors. All rights reserved.
 *
 * Each contributor holds copyright over their respective contributions.
 * The project versioning (Git) records all such contribution source information.
 *                                           
 *                                                                              
 * The BHoM is free software: you can redistribute it and/or modify         
 * it under the terms of the GNU Lesser General Public License as published by  
 * the Free Software Foundation, either version 3.0 of the License, or          
 * (at your option) any later version.                                          
 *                                                                              
 * The BHoM is distributed in the hope that it will be useful,              
 * but WITHOUT ANY WARRANTY; without even the implied warranty of               
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                 
 * GNU Lesser General Public License for more details.                          
 *                                                                            
 * You should have received a copy of the GNU Lesser General Public License     
 * along with this code. If not, see <https://www.gnu.org/licenses/lgpl-3.0.html>.      
 */

using BH.oM.Base;
using BH.oM.Base.Attributes;
using BH.oM.Geometry;
using BH.oM.Structure.MaterialFragments;
using BH.oM.Structure.SectionProperties;
using BH.oM.Structure.Elements;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using BH.oM.Structure.SurfaceProperties;
using BH.oM.Quantities.Attributes;

namespace BH.Engine.Structure
{
    public static partial class Modify
    {
      
        /***************************************************/
        /**** Public Methods                            ****/
        /***************************************************/

        [Description("Sets YoungsModulus and ShearModulus used for analysis of the material of the ISectionProperty based on the product specific properties. No action is taken if the material of the section is not a type of ITimber.")]
        [Input("sectionProperty", "SectionProperty on which to update the timber analysis properties of the assigned material. No action is taken if the material of the section is not a type of ITimber.")]
        [Input("stiffnessType", "Controls if Mean or Characteristic values should be used when assigning stiffness values.")]
        [Input("orientationType", "Controls if material is oriented in a flatwise or edgewise manner. Not used for all timber products.")]
        [Input("loadCondition", "Controls which primary load condition the element carrying the material will be exposed to. Not used for all timber products.")]
        [Input("poissonsRatio_0_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the parallel direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Input("poissonsRatio_90_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the other perpendicular direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Output("timber", "The timber material with updated stiffness properties based on the inputs and product specific values.")]
        public static void SetTimberAnalysisParameters(this ISectionProperty sectionProperty, TimberAnalysisStiffness stiffnessType, TimberAnalysisOrientation orientationType = TimberAnalysisOrientation.Edgewise, TimberAnalysisDominantLoadCondition loadCondition = TimberAnalysisDominantLoadCondition.Undefined, double poissonsRatio_0_90 = 0.4, double poissonsRatio_90_90 = 0.4)
        {
            ITimber timber = sectionProperty.Material as ITimber;
            if(timber != null)
                timber.ISetAnalysisParameters(stiffnessType, orientationType, loadCondition, poissonsRatio_0_90, poissonsRatio_90_90);
        }

        /***************************************************/

        [Description("Sets YoungsModulus and ShearModulus used for analysis of the material of the ISurfaceProperty based on the product specific properties. No action is taken if the material of the property is not a type of ITimber.")]
        [Input("surfaceProperty", "SurfaceProperty on which to update the timber analysis properties of the assigned material. No action is taken if the material of the section is not a type of ITimber.")]
        [Input("stiffnessType", "Controls if Mean or Characteristic values should be used when assigning stiffness values.")]
        [Input("orientationType", "Controls if material is oriented in a flatwise or edgewise manner. Not used for all timber products.")]
        [Input("loadCondition", "Controls if which primary load condition the element carrying the material will be exposed to. Not used for all timber products.")]
        [Input("poissonsRatio_0_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the parallel direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Input("poissonsRatio_90_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the other perpendicular direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Output("timber", "The timber material with updated stiffness properties based on the inputs and product specific values.")]
        public static void SetTimberAnalysisParameters(this ISurfaceProperty surfaceProperty, TimberAnalysisStiffness stiffnessType, TimberAnalysisOrientation orientationType = TimberAnalysisOrientation.Flatwise, TimberAnalysisDominantLoadCondition loadCondition = TimberAnalysisDominantLoadCondition.Undefined, double poissonsRatio_0_90 = 0.4, double poissonsRatio_90_90 = 0.4)
        {
            SetTimberAnalysisParametersSurfProp(surfaceProperty as dynamic, stiffnessType, orientationType, loadCondition, poissonsRatio_0_90, poissonsRatio_90_90);
        }

        /***************************************************/

        [Description("Sets YoungsModulus and ShearModulus used for analysis of the material of the ISectionProperty of the Bar based on the product specific properties. No action is taken if the material of the section is not a type of ITimber.")]
        [Input("bar", "Bar on which to update the timber analysis properties of material assigned to the SectionProperty. No action is taken if the material of the section is not a type of ITimber.")]
        [Input("stiffnessType", "Controls if Mean or Characteristic values should be used when assigning stiffness values.")]
        [Input("orientationType", "Controls if material is oriented in a flatwise or edgewise manner. Not used for all timber products.")]
        [Input("loadCondition", "Controls if which primary load condition the element carrying the material will be exposed to. Not used for all timber products.")]
        [Input("poissonsRatio_0_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the parallel direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Input("poissonsRatio_90_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the other perpendicular direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Output("timber", "The timber material with updated stiffness properties based on the inputs and product specific values.")]
        public static void SetTimberAnalysisParameters(this Bar bar, TimberAnalysisStiffness stiffnessType, TimberAnalysisOrientation orientationType = TimberAnalysisOrientation.Edgewise, TimberAnalysisDominantLoadCondition loadCondition = TimberAnalysisDominantLoadCondition.Undefined, double poissonsRatio_0_90 = 0.4, double poissonsRatio_90_90 = 0.4)
        {
            bar.SectionProperty.SetTimberAnalysisParameters(stiffnessType, orientationType, loadCondition, poissonsRatio_0_90, poissonsRatio_90_90);
        }

        /***************************************************/

        [Description("Sets YoungsModulus and ShearModulus used for analysis of the material of the ISurfaceProperty of the Panel based on the product specific properties. No action is taken if the material of the property is not a type of ITimber.")]
        [Input("panel", "Panel on which to update the timber analysis properties of material assigned to the Property. No action is taken if the material of the section is not a type of ITimber.")]
        [Input("stiffnessType", "Controls if Mean or Characteristic values should be used when assigning stiffness values.")]
        [Input("orientationType", "Controls if material is oriented in a flatwise or edgewise manner. Not used for all timber products.")]
        [Input("loadCondition", "Controls if which primary load condition the element carrying the material will be exposed to. Not used for all timber products.")]
        [Input("poissonsRatio_0_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the parallel direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Input("poissonsRatio_90_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the other perpendicular direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Output("timber", "The timber material with updated stiffness properties based on the inputs and product specific values.")]
        public static void SetTimberAnalysisParameters(this Panel panel, TimberAnalysisStiffness stiffnessType, TimberAnalysisOrientation orientationType = TimberAnalysisOrientation.Flatwise, TimberAnalysisDominantLoadCondition loadCondition = TimberAnalysisDominantLoadCondition.Undefined, double poissonsRatio_0_90 = 0.4, double poissonsRatio_90_90 = 0.4)
        {
            panel.Property.SetTimberAnalysisParameters(stiffnessType, orientationType, loadCondition, poissonsRatio_0_90, poissonsRatio_90_90);
        }

        /***************************************************/

        [Description("Sets YoungsModulus and ShearModulus used for analysis of the material of the ISurfaceProperty of the FEMesh based on the product specific properties. No action is taken if the material of the property is not a type of ITimber.")]
        [Input("feMesh", "FEMesh on which to update the timber analysis properties of material assigned to the Property. No action is taken if the material of the section is not a type of ITimber.")]
        [Input("stiffnessType", "Controls if Mean or Characteristic values should be used when assigning stiffness values.")]
        [Input("orientationType", "Controls if material is oriented in a flatwise or edgewise manner. Not used for all timber products.")]
        [Input("loadCondition", "Controls if which primary load condition the element carrying the material will be exposed to. Not used for all timber products.")]
        [Input("poissonsRatio_0_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the parallel direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Input("poissonsRatio_90_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the other perpendicular direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Output("timber", "The timber material with updated stiffness properties based on the inputs and product specific values.")]
        public static void SetTimberAnalysisParameters(this FEMesh feMesh, TimberAnalysisStiffness stiffnessType, TimberAnalysisOrientation orientationType = TimberAnalysisOrientation.Flatwise, TimberAnalysisDominantLoadCondition loadCondition = TimberAnalysisDominantLoadCondition.Undefined, double poissonsRatio_0_90 = 0.4, double poissonsRatio_90_90 = 0.4)
        {
            feMesh.Property.SetTimberAnalysisParameters(stiffnessType, orientationType, loadCondition, poissonsRatio_0_90, poissonsRatio_90_90);
        }

        /***************************************************/
        /**** Public  Methods - Interface               ****/
        /***************************************************/

        [Description("Sets YoungsModulus and ShearModulus used for analysis of the material of the any property of the BHoMObject based on the product specific properties. No action is taken if the material of the property is not a type of ITimber.")]
        [Input("bhObj", "BHoMObject on which to update the timber analysis properties of material assigned to the Property. No action is taken if the material of the section is not a type of ITimber.")]
        [Input("stiffnessType", "Controls if Mean or Characteristic values should be used when assigning stiffness values.")]
        [Input("orientationType", "Controls if material is oriented in a flatwise or edgewise manner. Not used for all timber products.")]
        [Input("loadCondition", "Controls if which primary load condition the element carrying the material will be exposed to. Not used for all timber products.")]
        [Input("poissonsRatio_0_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the parallel direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Input("poissonsRatio_90_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the other perpendicular direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Output("timber", "The timber material with updated stiffness properties based on the inputs and product specific values.")]
        public static void ISetTimberAnalysisParameters(this BHoMObject bhObj, TimberAnalysisStiffness stiffnessType, TimberAnalysisOrientation orientationType = TimberAnalysisOrientation.Undefined, TimberAnalysisDominantLoadCondition loadCondition = TimberAnalysisDominantLoadCondition.Undefined, double poissonsRatio_0_90 = 0.4, double poissonsRatio_90_90 = 0.4)
        {
            SetTimberAnalysisParameters(bhObj as dynamic, stiffnessType, orientationType, loadCondition, poissonsRatio_0_90, poissonsRatio_90_90);
        }

        /***************************************************/
        /**** Private Methods                           ****/
        /***************************************************/

        [Description("Sets YoungsModulus and ShearModulus used for analysis of the material of the ISectionProperty based on the product specific properties. No action is taken if the material of the section is not a type of ITimber.")]
        [Input("sectionProperty", "Timber material to update the Analysis proeprties of.")]
        [Input("stiffnessType", "Controls if Mean or Characteristic values should be used when assigning stiffness values.")]
        [Input("orientationType", "Controls if material is oriented in a flatwise or edgewise manner. Not used for all timber products.")]
        [Input("loadCondition", "Controls if which primary load condition the element carrying the material will be exposed to. Not used for all timber products.")]
        [Input("poissonsRatio_0_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the parallel direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Input("poissonsRatio_90_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the other perpendicular direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Output("timber", "The timber material with updated stiffness properties based on the inputs and product specific values.")]
        private static void SetTimberAnalysisParametersSurfProp(this ISurfaceProperty surfaceProperty, TimberAnalysisStiffness stiffnessType, TimberAnalysisOrientation orientationType, TimberAnalysisDominantLoadCondition loadCondition, double poissonsRatio_0_90, double poissonsRatio_90_90)
        {
            ITimber timber = surfaceProperty.Material as ITimber;
            if (timber != null)
                timber.ISetAnalysisParameters(stiffnessType, orientationType, loadCondition, poissonsRatio_0_90, poissonsRatio_90_90);
        }

        /***************************************************/

        [Description("Sets YoungsModulus and ShearModulus used for analysis of the material of the ISectionProperty based on the product specific properties. No action is taken if the material of the section is not a type of ITimber.")]
        [Input("sectionProperty", "Timber material to update the Analysis proeprties of.")]
        [Input("stiffnessType", "Controls if Mean or Characteristic values should be used when assigning stiffness values.")]
        [Input("orientationType", "Controls if material is oriented in a flatwise or edgewise manner. Not used for all timber products.")]
        [Input("loadCondition", "Controls if which primary load condition the element carrying the material will be exposed to. Not used for all timber products.")]
        [Input("poissonsRatio_0_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the parallel direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Input("poissonsRatio_90_90", "Poisson's ratio for strain in the perpendicular direction generated by unit strain in the other perpendicular direction. Defaults to 0.4, though value varies depending on timber species.", typeof(Ratio))]
        [Output("timber", "The timber material with updated stiffness properties based on the inputs and product specific values.")]
        private static void SetTimberAnalysisParametersSurfProp(this Layered surfaceProperty, TimberAnalysisStiffness stiffnessType, TimberAnalysisOrientation orientationType, TimberAnalysisDominantLoadCondition loadCondition, double poissonsRatio_0_90, double poissonsRatio_90_90)
        {
            foreach (Layer layer in surfaceProperty.Layers)
            {
                ITimber timber = layer.Material as ITimber;
                if (timber != null)
                    timber.ISetAnalysisParameters(stiffnessType, orientationType, loadCondition, poissonsRatio_0_90, poissonsRatio_90_90);
            }

        }

        /***************************************************/
        /**** Private  Methods - Fallback               ****/
        /***************************************************/

        private static void SetTimberAnalysisParameters(this BHoMObject bhObj, TimberAnalysisStiffness stiffnessType, TimberAnalysisOrientation orientationType, TimberAnalysisDominantLoadCondition loadCondition, double poissonsRatio_0_90, double poissonsRatio_90_90)
        {
            if (bhObj is ITimber)
                ISetAnalysisParameters(bhObj as ITimber, stiffnessType, orientationType, loadCondition, poissonsRatio_0_90, poissonsRatio_90_90);
            else
                Base.Compute.RecordWarning($"Unable to update timber properties for objects of type {bhObj.GetType()}");
        }

        /***************************************************/
    }
}
